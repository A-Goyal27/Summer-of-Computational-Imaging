{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyN+1I3mYTlaG/L3lkZMc4sq"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["# Homework"],"metadata":{"id":"gVUxI5Wupo8g"}},{"cell_type":"markdown","source":["For homework today you will be filling out a notebook that applies different filters to images! The three affects will be sepia, a brownish filter; posterize, a cartoony filter; and purplify, which makes an image purplish.\n","\n","Make sure to read all the comments."],"metadata":{"id":"MZBnluu_zc0p"}},{"cell_type":"code","source":["#get our main packages\n","import numpy as np\n","import matplotlib.pyplot as plt\n","from skimage import data"],"metadata":{"id":"mO9A7eiqqqIE"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#this function you don't have to write! Look over it though and make sure you understand what it is doing\n","def filter(image, type):\n","  img = np.array(image)\n","  if type == \"sepia\":\n","    return sepia(img)\n","  elif type == \"posterize\":\n","    return posterize(img)\n","  elif type == \"purplify\":\n","    return purplify(img)\n","  else:\n","    return img"],"metadata":{"id":"_sK5-NOdqu3a"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def sepia(image):\n","  #create a variable which is a matrix called sepiaMatrix that has the values specified below\n","  \"\"\"\n","  .393, .769, .189\n","  .349, .686, .168\n","  .272, .534, .131\n","  \"\"\"\n","\n","\n","  #don't worry about this step, this is just to get our stuff to work with python\n","  sepiaMatrixT = np.array(sepiaMatrix).T\n","  img = np.array(image)\n","\n","  #create a variable called sepia_img that is equal to the matrix img times the matrix sepiaMatrixT\n","\n","\n","  sepia_img = np.clip(sepia_img, 0, 255).astype(np.uint8) #we had to do a similar thing in the mini project, this is just to limit the range between 0-255\n","\n","  #return the variable sepia_img\n"],"metadata":{"id":"mFJAGY1ZrVkK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def posterize(image, levels=4): #by putting the = in the parameter, it makes it a \"default value\" - if no other value is specified, it will use 4\n","  factor = 256 // levels #the // is a floor division, it divides and then cuts off the decimal\n","\n","  img = np.array(image)\n","\n","  #create a variable called posterized_img, and set it equal to img floor divided by factor, and then multiplied by factor - (image floor-divided by factor) multiplied by factor\n","\n","\n","  posterized_img += factor // 2 #this just makes the image a bit brighter\n","\n","  return np.clip(posterized_img, 0, 255).astype(np.uint8)"],"metadata":{"id":"3_6txt7mvnwj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def purplify(image):\n","  #create a function that purplifies an image by settings all the green values in the color vectors to 0, look back at your mini-projects, we did very similar things in those\n","\n"],"metadata":{"id":"d0ftxDlqxHkS"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#run this cell to test your functions. Before running this cell though, make sure to run all the other cells\n","sepiaTest = filter(data.chelsea(), \"sepia\")\n","plt.imshow(sepiaTest)\n","plt.show()\n","\n","posterizeTest = filter(data.chelsea(), \"posterize\")\n","plt.imshow(posterizeTest)\n","plt.show()\n","\n","purplifyTest = filter(data.chelsea(), \"purplify\")\n","plt.imshow(purplifyTest)\n","plt.show()"],"metadata":{"id":"NuDrC_sNzDDc"},"execution_count":null,"outputs":[]}]}