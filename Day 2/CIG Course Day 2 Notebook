{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOALjInnRJ3t6SR2sHFEllm"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#Day 2 - Vectors, Matrices, and Images"],"metadata":{"id":"DbQrvG2NIhts"}},{"cell_type":"markdown","source":["Welcome to Day 2! Today we will see how we can operate on vectors and matrices. We will also start to load images."],"metadata":{"id":"T7ej4cghIjVu"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"1kzxwyV6Hnt3"},"outputs":[],"source":["#numpy is a python package that has a ton of useful math things in it, if you continue with python, you will probably use numpy is every project you have\n","#what we care right now about are the vector and matrix capabilities of numpy\n","import numpy as np #this line of code is storing the package numpy under the name np. Now when we want to use the package we use np.function() instead of numpy.function()\n","#it is common practice to name numpy \"np\""]},{"cell_type":"markdown","source":["##### Vectors"],"metadata":{"id":"t-wmF4GhKLqT"}},{"cell_type":"code","source":["#vectors\n","myVector = [3, 2]\n","myVector = np.array(myVector) #one thing you can do is just define a vector as a standard list, and then convert it to a numpy array\n","#additionally, this is how you use a packge. You write the name for the package, np, followed by a ., and then whatever function you want to use\n","print(myVector)"],"metadata":{"id":"pFhx6tetJftI"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#adding vectors\n","myVector2 = [1, 2]\n","myVector2 = np.array(myVector2)\n","addedVector = myVector + myVector2\n","\n","print(f\"{myVector} + {myVector2} = {addedVector}\") #this is new string syntax that is a bit cleaner, don't worry about it though"],"metadata":{"id":"xRkLqAGnJub-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#scaling vectors\n","scaledVector = myVector * 3 #separate variables for all\n","print(f\"{myVector} scaled by 3 = {scaledVector}\")"],"metadata":{"id":"34oJfy7kJzOt"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#try it yourself! scale the first vector by 3, scale the second vector by 4, and then add them\n","vector1 = np.array([4, 2])\n","vector2 = np.array([1, 3])\n","newVector =\n","\n","print(newVector)\n","#the output should be [16 18]"],"metadata":{"id":"lWhLrIXhJ2EK"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#to compute the dot product, we use the np.dot() function\n","vector1 = np.array([3, 4, 5])\n","vector2 = np.array([1, 2, 3])\n","dotProduct = np.dot(vector1, vector2)\n","\n","print(f\"The dot product of {vector1} and {vector2} is {dotProduct}\")"],"metadata":{"id":"cJZ820WOKM2Y"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### Matrices"],"metadata":{"id":"J1jsgW8lOTdX"}},{"cell_type":"code","source":["#matrix\n","myMatrix = [[4, 2], [-3, 10]]\n","myMatrix = np.array(myMatrix)\n","print(myMatrix)"],"metadata":{"id":"FxHWaO62OUsu"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#matrix addition\n","myMatrix2 = [[-5, 6], [2, -8]]\n","myMatrix2 = np.array(myMatrix2)\n","addedMatrix = myMatrix + myMatrix2\n","\n","print(f\"{myMatrix} \\n   + \\n{myMatrix2} \\n   = \\n{addedMatrix}\")"],"metadata":{"id":"FlvtdBmfO6wY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#scaling a matrix\n","scaledMatrix = myMatrix * 2\n","print(f\"{myMatrix} \\nscaled by 2 is \\n{scaledMatrix}\")"],"metadata":{"id":"-Iea2MNaO9l_"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#When doing matrix-vector multiplication with code, you use the @ symbol\n","vector1 = np.array([3, 4, 5])\n","matrix1 = np.array([[1, 2, 3], [4, 5, 6]])\n","multipliedVector = matrix1 @ vector1\n","\n","print(multipliedVector)"],"metadata":{"id":"4gu2TdMPO_u-"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#here is an example where the dimensions don't line up, you are trying to a 3x2 matrix by a 3-dimensional vector\n","vector1 = np.array([3, 4, 5])\n","matrix1 = np.array([[1, 2], [3, 4], [5, 6]])\n","print(matrix1 @ vector1)\n","#when you run the code you will get an error, most of what the error is saying seems like gibberish, but the last bit hits on what you care about"],"metadata":{"id":"B6ZmC_V7PM2g"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#since matrices are like lists of lists, we can loop through them easily\n","myMatrix = [[1, 2], [3, 4]]\n","myMatrix = np.array(myMatrix)\n","for row in myMatrix:\n","  for element in row:\n","    print(element)\n"],"metadata":{"id":"9sineawzZG0L"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#also, since they are lists, we can access things by index\n","myMatrix = [[1, 2], [3, 4]]\n","myMatrix = np.array(myMatrix)\n","print(myMatrix[0][1]) #this is saying, get the element of index 1 from the row of index 0"],"metadata":{"id":"mmQhPaUEZNqP"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["###### Color"],"metadata":{"id":"eEfL74R7QHfk"}},{"cell_type":"code","source":["import matplotlib.pyplot as plt #this is one of the main packages used for graphing and displaying visuals"],"metadata":{"id":"CX5ZESA1QKyV"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#grayscale\n","grayscale_color = 0.5 #grayscale values aren't represented with vectors, (although you could think of them as 1D vectors). Instead they are just a value from 0 to 1, with 0 being black and 1 being white\n","image = np.ones((100, 100)) * grayscale_color\n","\n","plt.imshow(image, cmap='gray', vmin=0, vmax=1)\n","#this will just output a grayscale color, try changing grayscale_color to see how things change\n"],"metadata":{"id":"tLA9OX43QeSY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#RGB\n","myColor = np.array([150, 230, 240])\n","myColor = myColor/255 #sometimes, computation is easier with values between 0 and 1, so here we are scaling our color vector down by a factor of 255 so the values are between 0 and 1\n","image = np.ones((100, 100, 3)) * myColor\n","plt.imshow(image)\n","#try messing around with different values and see what you get\n","#for fun, see what happens when the RGB are all the same value, do you notice a pattern?"],"metadata":{"id":"CoCzo7uZRdDJ"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["##### Images"],"metadata":{"id":"OcmTlzl-WRA0"}},{"cell_type":"code","source":["from skimage import data #this package gives us image processing tools, we will just be using it to get some images to display"],"metadata":{"id":"JCitkdG2QufM"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["grayscale_image = data.camera()\n","plt.imshow(grayscale_image, cmap='gray')"],"metadata":{"id":"vU7nJmXyRCGv"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["color_image = data.astronaut()\n","plt.imshow(color_image)"],"metadata":{"id":"yNebKZw7Q78R"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#lets look at what color vectors are in the image\n","\n","patch = color_image[:10, :10] #this is the top left of the image\n","plt.imshow(patch)\n","plt.show()\n","\n","for r in range(patch.shape[0]):\n","  print('\\n')\n","  for c in range(patch.shape[1]):\n","    print(color_image[r][c], end=' ')\n","\n","#the numbers you will see are the individual color vectors for this patch\n"],"metadata":{"id":"GJj03kNIS4vR"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#lets look at what the color vectors are in the image - the output will be very large, but this should give you a sense of how the computer stores the image - take a small patch, print out and also visualize image\n","for r in range(color_image.shape[0]):\n","  print('\\n')\n","  for c in range(color_image[r].shape[0]):\n","    print(color_image[r][c], end=' ')"],"metadata":{"id":"e-KVedKURSDW"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["## Mini Projects"],"metadata":{"id":"_VDJZZ2HSGxm"}},{"cell_type":"code","source":["#build a function that takes in a matrix as a 2D list and returns a copy of that matrix\n"],"metadata":{"id":"of1Okco2SIYj"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#write a function that takes in an image, and makes it darker by scaling the color vectors by a factor less than 1\n"],"metadata":{"id":"5aYAGgeVSaV1"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["#write a function that takes a color image, and makes it grayscale - there are a ton of publicly available functions for this, try writing your own though!\n","\n","#if you plan to edit the original image, make a copy of it and store it in a new variable - if you are wondering why this needs to be done ask your instructor\n"],"metadata":{"id":"tgQdB_hhUXq0"},"execution_count":null,"outputs":[]}]}